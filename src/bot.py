# -*- coding: utf-8 -*-
__author__ = 'Denis Titusov, sescusu@gmail.com'

import os
import telebot
import time
from schedule import get_schedule
import botan

BOT_TOKEN = os.getenv('BOT_TOKEN')
BOTAN_TOKEN = os.getenv('BOTAN_TOKEN')

bot = telebot.TeleBot(BOT_TOKEN)
start_message = """–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∂–æ–∫! –Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –æ –±–ª–∏–∂–∞–π—à–∏—Ö —Ç—É—Ä–∞—Ö –ï–ª–æ–∫ –ú–æ—Ç–∞–ª–æ–∫. –ï—Å–ª–∏ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–∞–ø–∏—à–∏ "—Ç—É—Ä—ã".
–Ø –ø–æ–∫–∞ —á—Ç–æ —Å–æ–≤—Å–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π –∏ –º–Ω–æ–≥–æ–≥–æ –Ω–µ —É–º–µ—é, –Ω–æ —è —É—á—É—Å—å!"""


def pretify_schdeule(schedule, user_uuid=None):
    schedule_list = []
    for tour in schedule:
        try:
            tour["shorten_link"] = botan.shorten_url(tour["description"], BOTAN_TOKEN, user_uuid.id)
            tour_string = ("–¢—É—Ä: {name}, –µ–¥–µ–º {date}.\n{shorten_link}").format(**tour)
        except:
            tour_string = ("–¢—É—Ä: {name}, –µ–¥–µ–º {date}.\n{description}").format(**tour)
        finally:
            schedule_list.append(tour_string)
    return schedule_list

@bot.message_handler(commands=["start", "help"])
def start_and_help(message):
    response_markup = telebot.types.ReplyKeyboardMarkup()
    response_markup.add("–¢—É—Ä—ã")
    bot.send_message(message.chat.id, start_message, reply_markup=response_markup)
    botan.track(BOTAN_TOKEN, message.from_user, message, "Start")


@bot.message_handler(regexp=".*(?i)(—Ç—É—Ä—ã|tour).*")
def send_tour_info(message):
    hider = telebot.types.ReplyKeyboardHide()
    bot.send_message(message.chat.id, '–°–µ–π—á–∞—Å –ø–æ–¥—É–º–∞—é...', reply_markup=hider)
    botan.track(BOTAN_TOKEN, message.from_user, message, "Tours")
    schedule = get_schedule()
    if not schedule:
        bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è, –∫–∞–∫–æ–π-—Ç–æ –∂—É–ª–∏–∫ —É–∫—Ä–∞–ª –≤—Å–µ –Ω–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ù–æ –º—ã –µ–≥–æ —É–∂–µ –∏—â–µ–º!")
        return
    pretty_messages = pretify_schdeule(schedule, message.from_user)
    bot.send_message(message.chat.id, "–ù–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ —Ç—É—Ä—ã:\n====================")
    for sch in pretty_messages:
        bot.send_message(message.chat.id, '{0}\n----'.format(sch))
        time.sleep(2)

@bot.message_handler(content_types=["text"])
def repeat_all_messages(message):
    bot.send_message(message.chat.id, ("–ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n"
                                      "–ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –ø—Ä–æ —Ç—É—Ä—ã, —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ üòä"))


if __name__ == '__main__':
    bot.polling(none_stop=True)
